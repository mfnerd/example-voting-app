apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: trust-no-one-here
  namespace: default
spec:
  podSelector: {}
  policyTypes:
    - Ingress
    - Egress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: vault-comms
  namespace: default
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: vault
      app.kubernetes.io/instance: vault
      component: server
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              work-policy: enabled
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: vault-agent-injector
              component: webhook
      ports:
        - protocol: TCP
          port: 8200
  egress:
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0 # Consider restricting to cluster CIDR if known
      ports:
        - protocol: TCP
          port: 443
        - protocol: UDP
          port: 53
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-api-to-injector
  namespace: default
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: vault
      app.kubernetes.io/name: vault-agent-injector
      component: webhook
  policyTypes:
    - Ingress
    - Egress
  ingress:
    # Traffic from Kubernetes API
    - from:
        - ipBlock:
            cidr: 10.0.0.0/8
      ports:
        - protocol: TCP
          port: 8080
        - protocol: TCP
          port: 443
        - protocol: UDP
          port: 53
    # Self-resolution rule
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/instance: vault
              app.kubernetes.io/name: vault-agent-injector
              component: webhook
      ports:
        - protocol: TCP
          port: 8080
  egress:
    # Traffic to Kubernetes API and DNS
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
      ports:
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 8080
        - protocol: UDP
          port: 53
    # Traffic to Vault server
    - to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: vault
              component: server
      ports:
        - protocol: TCP
          port: 8200
    # Allow internal DNS resolution
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
          podSelector:
            matchLabels:
              k8s-app: kube-dns
      ports:
        - protocol: UDP
          port: 53
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: vote-policy
  namespace: default
spec:
  podSelector:
    matchLabels:
      app: vote
  policyTypes:
    - Ingress
    - Egress
  ingress:
    # Allow HTTP traffic from anywhere for voting UI
    - from:
        - ipBlock:
            cidr: 0.0.0.0/0
      ports:
        - protocol: TCP
          port: 80
  egress:
    # Allow traffic to Redis
    - to:
        - podSelector:
            matchLabels:
              app: redis
      ports:
        - protocol: TCP
          port: 6379
    # Allow DNS resolution
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
          podSelector:
            matchLabels:
              k8s-app: kube-dns
      ports:
        - protocol: UDP
          port: 53
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: redis-policy
  namespace: default
spec:
  podSelector:
    matchLabels:
      app: redis
  policyTypes:
    - Ingress
    - Egress
  ingress:
    # Allow traffic from vote app
    - from:
        - podSelector:
            matchLabels:
              app: vote
      ports:
        - protocol: TCP
          port: 6379
    # Allow traffic from worker app
    - from:
        - podSelector:
            matchLabels:
              app: worker
      ports:
        - protocol: TCP
          port: 6379
  egress:
    # Allow DNS resolution
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
          podSelector:
            matchLabels:
              k8s-app: kube-dns
      ports:
        - protocol: UDP
          port: 53
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: worker-policy
  namespace: default
spec:
  podSelector:
    matchLabels:
      app: worker
  policyTypes:
    - Egress
  egress:
    # Allow traffic to Redis
    - to:
        - podSelector:
            matchLabels:
              app: redis
      ports:
        - protocol: TCP
          port: 6379
    # Allow traffic to DB (PostgreSQL)
    - to:
        - podSelector:
            matchLabels:
              app: db
      ports:
        - protocol: TCP
          port: 5432
    # Allow DNS resolution
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
          podSelector:
            matchLabels:
              k8s-app: kube-dns
      ports:
        - protocol: UDP
          port: 53
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: db-policy
  namespace: default
spec:
  podSelector:
    matchLabels:
      app: db
  policyTypes:
    - Ingress
    - Egress
  ingress:
    # Allow traffic from worker app
    - from:
        - podSelector:
            matchLabels:
              app: worker
      ports:
        - protocol: TCP
          port: 5432
    # Allow traffic from result app
    - from:
        - podSelector:
            matchLabels:
              app: result
      ports:
        - protocol: TCP
          port: 5432
  egress:
    # Allow DNS resolution
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
          podSelector:
            matchLabels:
              k8s-app: kube-dns
      ports:
        - protocol: UDP
          port: 53
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: result-policy
  namespace: default
spec:
  podSelector:
    matchLabels:
      app: result
  policyTypes:
    - Ingress
    - Egress
  ingress:
    # Allow HTTP traffic from anywhere for results UI
    - from:
        - ipBlock:
            cidr: 0.0.0.0/0
      ports:
        - protocol: TCP
          port: 80
  egress:
    # Allow traffic to DB (PostgreSQL)
    - to:
        - podSelector:
            matchLabels:
              app: db
      ports:
        - protocol: TCP
          port: 5432
    # Allow DNS resolution
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
          podSelector:
            matchLabels:
              k8s-app: kube-dns
      ports:
        - protocol: UDP
          port: 53

#Notes: 

# By using namespaceSelector: or Pod Selector, you can specify scope of traffic acces by pod group or namespace group.

# This can be layered with the pod selector to provide ultra fine grained access for you group of pods or namespaces. 

# You're allowed multiple groups of ingress sources to be granular with your policies.

# Network Policies create policy Rules for specific groups of pods in your specified namespace.

# You can create different policies for different groups of pods Or one policy for multiple groups of pods.

# {} Braces to denote groups of pods or namespaces. 

# By establishing a network policy we set a baseline of deny all. 
# Then we build upon how we declare accesibility through our policy types.

# So you can't define a namespace selector on the spec level as the namespace is defined in meta-data of your policy. 

# But you can either target a group of pods in the spec or it's entire namespaces
# When you move on to your policy type attributes, you can apply namespace or pod access to your spec pod selector

#Simple is best when designing your network policies.
#Due to it's implicit deny all status, things can get hairy when you combine namespace rules to application rules
#Make the choice to create policies around the network or the application and stick to it.

# It is ivery important for you to make sure have the correct match labels for you applications.
